// Code generated by running "go generate" in mellium.im/xmpp/disco. DO NOT EDIT.

package disco

// Predefined identities generated from the Service Discovery Identities
// Registry as registered with the XMPP Registrar.
var (
	// Category: The "account" category is to be used by a server when responding to a disco request sent to the bare JID (user@host addresss) of an account hosted by the server.
	// Type: The user@host is an administrative account
	AdminAccount func(name, lang string) Option = newIdentity("account", "admin")

	// Category: The "account" category is to be used by a server when responding to a disco request sent to the bare JID (user@host addresss) of an account hosted by the server.
	// Type: The user@host is a "guest" account that allows anonymous login by any user
	AnonymousAccount func(name, lang string) Option = newIdentity("account", "anonymous")

	// Category: The "account" category is to be used by a server when responding to a disco request sent to the bare JID (user@host addresss) of an account hosted by the server.
	// Type: The user@host is a registered or provisioned account associated with a particular non-administrative user
	RegisteredAccount func(name, lang string) Option = newIdentity("account", "registered")

	// Category: The "auth" category consists of server components that provide authentication services within a server implementation.
	// Type: A server component that authenticates based on external certificates
	CertAuth func(name, lang string) Option = newIdentity("auth", "cert")

	// Category: The "auth" category consists of server components that provide authentication services within a server implementation.
	// Type: A server authentication component other than one of the registered types
	GenericAuth func(name, lang string) Option = newIdentity("auth", "generic")

	// Category: The "auth" category consists of server components that provide authentication services within a server implementation.
	// Type: A server component that authenticates against an LDAP database
	LDAPAuth func(name, lang string) Option = newIdentity("auth", "ldap")

	// Category: The "auth" category consists of server components that provide authentication services within a server implementation.
	// Type: A server component that authenticates against an NT domain
	NTLMAuth func(name, lang string) Option = newIdentity("auth", "ntlm")

	// Category: The "auth" category consists of server components that provide authentication services within a server implementation.
	// Type: A server component that authenticates against a PAM system
	PAMAuth func(name, lang string) Option = newIdentity("auth", "pam")

	// Category: The "auth" category consists of server components that provide authentication services within a server implementation.
	// Type: A server component that authenticates against a Radius system
	RadiusAuth func(name, lang string) Option = newIdentity("auth", "radius")

	// Category: The "automation" category consists of entities and nodes that provide automated or programmed interaction.
	// Type: The node for a list of commands; valid only for the node "http://jabber.org/protocol/commands"
	CommandListAutomation func(name, lang string) Option = newIdentity("automation", "command-list")

	// Category: The "automation" category consists of entities and nodes that provide automated or programmed interaction.
	// Type: A node for a specific command; the "node" attribute uniquely identifies the command
	CommandNodeAutomation func(name, lang string) Option = newIdentity("automation", "command-node")

	// Category: The "automation" category consists of entities and nodes that provide automated or programmed interaction.
	// Type: An entity that supports Jabber-RPC.
	RpcAutomation func(name, lang string) Option = newIdentity("automation", "rpc")

	// Category: The "automation" category consists of entities and nodes that provide automated or programmed interaction.
	// Type: An entity that supports the SOAP XMPP Binding.
	SOAPAutomation func(name, lang string) Option = newIdentity("automation", "soap")

	// Category: The "automation" category consists of entities and nodes that provide automated or programmed interaction.
	// Type: An entity that provides automated translation services.
	TranslationAutomation func(name, lang string) Option = newIdentity("automation", "translation")

	// Category: The "client" category consists of different types of clients, mostly for instant messaging.
	// Type: An automated client that is not controlled by a human user
	BotClient func(name, lang string) Option = newIdentity("client", "bot")

	// Category: The "client" category consists of different types of clients, mostly for instant messaging.
	// Type: Minimal non-GUI client used on dumb terminals or text-only screens
	ConsoleClient func(name, lang string) Option = newIdentity("client", "console")

	// Category: The "client" category consists of different types of clients, mostly for instant messaging.
	// Type: A client running on a gaming console
	GameClient func(name, lang string) Option = newIdentity("client", "game")

	// Category: The "client" category consists of different types of clients, mostly for instant messaging.
	// Type: A client running on a PDA, RIM device, or other handheld
	HandheldClient func(name, lang string) Option = newIdentity("client", "handheld")

	// Category: The "client" category consists of different types of clients, mostly for instant messaging.
	// Type: Standard full-GUI client used on desktops and laptops
	PCClient func(name, lang string) Option = newIdentity("client", "pc")

	// Category: The "client" category consists of different types of clients, mostly for instant messaging.
	// Type: A client running on a mobile phone or other telephony device
	PhoneClient func(name, lang string) Option = newIdentity("client", "phone")

	// Category: The "client" category consists of different types of clients, mostly for instant messaging.
	// Type: A client that is not actually using an instant messaging client; however, messages sent to this contact will be delivered as Short Message Service (SMS) messages
	SMSClient func(name, lang string) Option = newIdentity("client", "sms")

	// Category: The "client" category consists of different types of clients, mostly for instant messaging.
	// Type: A client operated from within a web browser
	WebClient func(name, lang string) Option = newIdentity("client", "web")

	// Category: The "collaboration" category consists of services that enable multiple individuals to work together in real time.
	// Type: Multi-user whiteboarding service
	WhiteboardCollaboration func(name, lang string) Option = newIdentity("collaboration", "whiteboard")

	// Category: The "component" category consists of services that are internal to server implementations and not normally exposed outside a server.
	// Type: A server component that archives traffic
	ArchiveComponent func(name, lang string) Option = newIdentity("component", "archive")

	// Category: The "component" category consists of services that are internal to server implementations and not normally exposed outside a server.
	// Type: A server component that handles client connections
	C2SComponent func(name, lang string) Option = newIdentity("component", "c2s")

	// Category: The "component" category consists of services that are internal to server implementations and not normally exposed outside a server.
	// Type: A server component other than one of the registered types
	GenericComponent func(name, lang string) Option = newIdentity("component", "generic")

	// Category: The "component" category consists of services that are internal to server implementations and not normally exposed outside a server.
	// Type: A server component that handles load balancing
	LoadComponent func(name, lang string) Option = newIdentity("component", "load")

	// Category: The "component" category consists of services that are internal to server implementations and not normally exposed outside a server.
	// Type: A server component that logs server information
	LogComponent func(name, lang string) Option = newIdentity("component", "log")

	// Category: The "component" category consists of services that are internal to server implementations and not normally exposed outside a server.
	// Type: A server component that provides presence information
	PresenceComponent func(name, lang string) Option = newIdentity("component", "presence")

	// Category: The "component" category consists of services that are internal to server implementations and not normally exposed outside a server.
	// Type: A server component that handles core routing logic
	RouterComponent func(name, lang string) Option = newIdentity("component", "router")

	// Category: The "component" category consists of services that are internal to server implementations and not normally exposed outside a server.
	// Type: A server component that handles server connections
	S2SComponent func(name, lang string) Option = newIdentity("component", "s2s")

	// Category: The "component" category consists of services that are internal to server implementations and not normally exposed outside a server.
	// Type: A server component that manages user sessions
	SMComponent func(name, lang string) Option = newIdentity("component", "sm")

	// Category: The "component" category consists of services that are internal to server implementations and not normally exposed outside a server.
	// Type: A server component that provides server statistics
	StatsComponent func(name, lang string) Option = newIdentity("component", "stats")

	// Category: The "conference" category consists of online conference services such as multi-user chatroom services.
	// Type: Internet Relay Chat service
	IRCConference func(name, lang string) Option = newIdentity("conference", "irc")

	// Category: The "conference" category consists of online conference services such as multi-user chatroom services.
	// Type: Text conferencing service
	TextConference func(name, lang string) Option = newIdentity("conference", "text")

	// Category: The "directory" category consists of information retrieval services that enable users to search online directories or otherwise be informed about the existence of other XMPP entities.
	// Type: A directory of chatrooms
	ChatroomDirectory func(name, lang string) Option = newIdentity("directory", "chatroom")

	// Category: The "directory" category consists of information retrieval services that enable users to search online directories or otherwise be informed about the existence of other XMPP entities.
	// Type: A directory that provides shared roster groups
	GroupDirectory func(name, lang string) Option = newIdentity("directory", "group")

	// Category: The "directory" category consists of information retrieval services that enable users to search online directories or otherwise be informed about the existence of other XMPP entities.
	// Type: A directory of end users (e.g., JUD)
	UserDirectory func(name, lang string) Option = newIdentity("directory", "user")

	// Category: The "directory" category consists of information retrieval services that enable users to search online directories or otherwise be informed about the existence of other XMPP entities.
	// Type: A directory of waiting list entries
	WaitinglistDirectory func(name, lang string) Option = newIdentity("directory", "waitinglist")

	// Category: The "gateway" category consists of translators between Jabber/XMPP services and non-XMPP services.
	// Type: Gateway to AOL Instant Messenger
	AIMGateway func(name, lang string) Option = newIdentity("gateway", "aim")

	// Category: The "gateway" category consists of translators between Jabber/XMPP services and non-XMPP services.
	// Type: Gateway to the Facebook IM service
	FacebookGateway func(name, lang string) Option = newIdentity("gateway", "facebook")

	// Category: The "gateway" category consists of translators between Jabber/XMPP services and non-XMPP services.
	// Type: Gateway to the Gadu-Gadu IM service
	GaduGaduGateway func(name, lang string) Option = newIdentity("gateway", "gadu-gadu")

	// Category: The "gateway" category consists of translators between Jabber/XMPP services and non-XMPP services.
	// Type: Gateway that provides HTTP Web Services access
	HTTPWSGateway func(name, lang string) Option = newIdentity("gateway", "http-ws")

	// Category: The "gateway" category consists of translators between Jabber/XMPP services and non-XMPP services.
	// Type: Gateway to ICQ
	ICQGateway func(name, lang string) Option = newIdentity("gateway", "icq")

	// Category: The "gateway" category consists of translators between Jabber/XMPP services and non-XMPP services.
	// Type: Gateway to IRC
	IRCGateway func(name, lang string) Option = newIdentity("gateway", "irc")

	// Category: The "gateway" category consists of translators between Jabber/XMPP services and non-XMPP services.
	// Type: Gateway to Microsoft Live Communications Server
	LCSGateway func(name, lang string) Option = newIdentity("gateway", "lcs")

	// Category: The "gateway" category consists of translators between Jabber/XMPP services and non-XMPP services.
	// Type: Gateway to the mail.ru IM service
	MRIMGateway func(name, lang string) Option = newIdentity("gateway", "mrim")

	// Category: The "gateway" category consists of translators between Jabber/XMPP services and non-XMPP services.
	// Type: Gateway to MSN Messenger
	MSNGateway func(name, lang string) Option = newIdentity("gateway", "msn")

	// Category: The "gateway" category consists of translators between Jabber/XMPP services and non-XMPP services.
	// Type: Gateway to the MySpace IM service
	MyspaceimGateway func(name, lang string) Option = newIdentity("gateway", "myspaceim")

	// Category: The "gateway" category consists of translators between Jabber/XMPP services and non-XMPP services.
	// Type: Gateway to Microsoft Office Communications Server
	OCSGateway func(name, lang string) Option = newIdentity("gateway", "ocs")

	// Category: The "gateway" category consists of translators between Jabber/XMPP services and non-XMPP services.
	// Type: Gateway to the QQ IM service
	QQGateway func(name, lang string) Option = newIdentity("gateway", "qq")

	// Category: The "gateway" category consists of translators between Jabber/XMPP services and non-XMPP services.
	// Type: Gateway to IBM Lotus Sametime
	SametimeGateway func(name, lang string) Option = newIdentity("gateway", "sametime")

	// Category: The "gateway" category consists of translators between Jabber/XMPP services and non-XMPP services.
	// Type: Gateway to SIP for Instant Messaging and Presence Leveraging Extensions (SIMPLE)
	SimpleGateway func(name, lang string) Option = newIdentity("gateway", "simple")

	// Category: The "gateway" category consists of translators between Jabber/XMPP services and non-XMPP services.
	// Type: Gateway to the Skype service
	SkypeGateway func(name, lang string) Option = newIdentity("gateway", "skype")

	// Category: The "gateway" category consists of translators between Jabber/XMPP services and non-XMPP services.
	// Type: Gateway to Short Message Service
	SMSGateway func(name, lang string) Option = newIdentity("gateway", "sms")

	// Category: The "gateway" category consists of translators between Jabber/XMPP services and non-XMPP services.
	// Type: Gateway to the SMTP (email) network
	SMTPGateway func(name, lang string) Option = newIdentity("gateway", "smtp")

	// Category: The "gateway" category consists of translators between Jabber/XMPP services and non-XMPP services.
	// Type: Gateway to the Tlen IM service
	TlenGateway func(name, lang string) Option = newIdentity("gateway", "tlen")

	// Category: The "gateway" category consists of translators between Jabber/XMPP services and non-XMPP services.
	// Type: Gateway to the Xfire gaming and IM service
	XfireGateway func(name, lang string) Option = newIdentity("gateway", "xfire")

	// Category: The "gateway" category consists of translators between Jabber/XMPP services and non-XMPP services.
	// Type: Gateway to another XMPP service (NOT via native server-to-server communication)
	XMPPGateway func(name, lang string) Option = newIdentity("gateway", "xmpp")

	// Category: The "gateway" category consists of translators between Jabber/XMPP services and non-XMPP services.
	// Type: Gateway to Yahoo! Instant Messenger
	YahooGateway func(name, lang string) Option = newIdentity("gateway", "yahoo")

	// Category: The "headline" category consists of services that provide real-time news or information (often but not necessarily in a message of type "headline").
	// Type: Service that notifies a user of new email messages.
	NewmailHeadline func(name, lang string) Option = newIdentity("headline", "newmail")

	// Category: The "headline" category consists of services that provide real-time news or information (often but not necessarily in a message of type "headline").
	// Type: RSS notification service.
	RSSHeadline func(name, lang string) Option = newIdentity("headline", "rss")

	// Category: The "headline" category consists of services that provide real-time news or information (often but not necessarily in a message of type "headline").
	// Type: Service that provides weather alerts.
	WeatherHeadline func(name, lang string) Option = newIdentity("headline", "weather")

	// Category: The "hierarchy" category is used to describe nodes within a hierarchy of nodes; the "branch" and "leaf" types are exhaustive.
	// Type: A service discovery node that contains further nodes in the hierarchy.
	BranchHierarchy func(name, lang string) Option = newIdentity("hierarchy", "branch")

	// Category: The "hierarchy" category is used to describe nodes within a hierarchy of nodes; the "branch" and "leaf" types are exhaustive.
	// Type: A service discovery node that does not contain further nodes in the hierarchy.
	LeafHierarchy func(name, lang string) Option = newIdentity("hierarchy", "leaf")

	// Category: The "proxy" category consists of servers or services that act as special-purpose proxies or intermediaries between two or more XMPP endpoints.
	// Type: SOCKS5 bytestreams proxy service
	BytestreamsProxy func(name, lang string) Option = newIdentity("proxy", "bytestreams")

	// Category: Services and nodes that adhere to XEP-0060.
	// Type: A pubsub node of the "collection" type.
	CollectionPubsub func(name, lang string) Option = newIdentity("pubsub", "collection")

	// Category: Services and nodes that adhere to XEP-0060.
	// Type: A pubsub node of the "leaf" type.
	LeafPubsub func(name, lang string) Option = newIdentity("pubsub", "leaf")

	// Category: Services and nodes that adhere to XEP-0060.
	// Type: A personal eventing service that supports the publish-subscribe subset defined in XEP-0163.
	PEPPubsub func(name, lang string) Option = newIdentity("pubsub", "pep")

	// Category: Services and nodes that adhere to XEP-0060.
	// Type: A pubsub service that supports the functionality defined in XEP-0060.
	ServicePubsub func(name, lang string) Option = newIdentity("pubsub", "service")

	// Category: The "server" category consists of any Jabber/XMPP server.
	// Type: Standard Jabber/XMPP server used for instant messaging and presence
	IMServer func(name, lang string) Option = newIdentity("server", "im")

	// Category: The "store" category consists of internal server components that provide data storage and retrieval services.
	// Type: A server component that stores data in a Berkeley database
	BerkeleyStore func(name, lang string) Option = newIdentity("store", "berkeley")

	// Category: The "store" category consists of internal server components that provide data storage and retrieval services.
	// Type: A server component that stores data on the file system
	FileStore func(name, lang string) Option = newIdentity("store", "file")

	// Category: The "store" category consists of internal server components that provide data storage and retrieval services.
	// Type: A server data storage component other than one of the registered types
	GenericStore func(name, lang string) Option = newIdentity("store", "generic")

	// Category: The "store" category consists of internal server components that provide data storage and retrieval services.
	// Type: A server component that stores data in an LDAP database
	LDAPStore func(name, lang string) Option = newIdentity("store", "ldap")

	// Category: The "store" category consists of internal server components that provide data storage and retrieval services.
	// Type: A server component that stores data in a MySQL database
	MysqlStore func(name, lang string) Option = newIdentity("store", "mysql")

	// Category: The "store" category consists of internal server components that provide data storage and retrieval services.
	// Type: A server component that stores data in an Oracle database
	OracleStore func(name, lang string) Option = newIdentity("store", "oracle")

	// Category: The "store" category consists of internal server components that provide data storage and retrieval services.
	// Type: A server component that stores data in a PostgreSQL database
	PostgresStore func(name, lang string) Option = newIdentity("store", "postgres")
)

func newIdentity(cat, typ string) func(string, string) Option {
	return func(name, lang string) Option {
		return Identity(cat, typ, name, lang)
	}
}
